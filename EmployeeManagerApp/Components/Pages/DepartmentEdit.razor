@inject IUnitOfWork unitOfWork
<h3>DepartmentEdit</h3>


<h1>Edit</h1>

<h4>Department</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm OnValidSubmit="@EditDepartment">
           <DataAnnotationsValidator/>
            <ValidationSummary/>
            <InputNumber type="hidden" @bind-Value="@department.Id" />
            <div class="form-group">
                <label for="DepartmentName" class="control-label"></label>
                <InputText @bind-Value="@department.DepartmentName" class="form-control" />
                <span asp-validation-for="DepartmentName" class="text-danger"></span>
            </div>
            <div class="form-group" hidden>
                <label for="CreatedTime" class="control-label"></label>
                <InputDate @bind-Value="@department.CreatedTime" class="form-control" />
                <span asp-validation-for="CreatedTime" class="text-danger"></span>
            </div>
            <div class="form-group" hidden>
                <label for="UpdatedTime" class="control-label"></label>
                <InputDate @bind-Value="@department.UpdatedTime" class="form-control" />
                <span asp-validation-for="UpdatedTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </EditForm>
    </div>
</div>

<div>
    <NavLink href="@String.Format("Deparments/Index")">Back to List</NavLink>
</div>

@code {
    [Parameter]
    public Department department { get; set; }

     private async Task EditDepartment()
        {
        await unitOfWork.Departments.UpdateDepartment(department);
        await unitOfWork.Save();

        }

}
